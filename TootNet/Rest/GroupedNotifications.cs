// Generated by TootNet.Generator.  DO NOT EDIT!

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using TootNet.Internal;
using TootNet.Objects;

namespace TootNet.Rest
{
    public class GroupedNotifications : ApiBase
    {
        internal GroupedNotifications(Tokens e) : base(e) { }

        /// <summary>
        /// <para>Get all grouped notifications.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> min_id (optional)</para>
        /// <para>- <c>int</c> limit (optional)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> types (optional)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> exclude_types (optional)</para>
        /// <para>- <c>long</c> account_id (optional)</para>
        /// <para>- <c>string</c> expand_accounts (optional)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> grouped_types (optional)</para>
        /// <para>- <c>bool</c> include_filtered (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the groupednotificationsresults object.</para>
        /// </returns>
        public Task<Objects.GroupedNotificationsResults> GetAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessApiAsync<Objects.GroupedNotificationsResults>(MethodType.Get, "notifications", Utils.ExpressionToDictionary(parameters), apiVersion: "v2");
        }

        /// <inheritdoc cref="GetAsync(Expression{Func{string, object}}[])"/>
        public Task<Objects.GroupedNotificationsResults> GetAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessApiAsync<Objects.GroupedNotificationsResults>(MethodType.Get, "notifications", parameters, apiVersion: "v2");
        }

        /// <summary>
        /// <para>Get a single notification group.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> group_key (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the groupednotificationsresults object.</para>
        /// </returns>
        public Task<Objects.GroupedNotificationsResults> GroupKeyAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<Objects.GroupedNotificationsResults>(MethodType.Get, "notifications/{group_key}", "group_key", Utils.ExpressionToDictionary(parameters), apiVersion: "v2");
        }

        /// <inheritdoc cref="GroupKeyAsync(Expression{Func{string, object}}[])"/>
        public Task<Objects.GroupedNotificationsResults> GroupKeyAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<Objects.GroupedNotificationsResults>(MethodType.Get, "notifications/{group_key}", "group_key", parameters, apiVersion: "v2");
        }

        /// <summary>
        /// <para>Dismiss a single notification group.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> group_key (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the empty object.</para>
        /// </returns>
        public Task DismissAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Post, "notifications/{group_key}/dismiss", "group_key", Utils.ExpressionToDictionary(parameters), apiVersion: "v2");
        }

        /// <inheritdoc cref="DismissAsync(Expression{Func{string, object}}[])"/>
        public Task DismissAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Post, "notifications/{group_key}/dismiss", "group_key", parameters, apiVersion: "v2");
        }

        /// <summary>
        /// <para>Get accounts of all notifications in a notification group.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>string</c> group_key (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the list of account object.</para>
        /// </returns>
        public Task<ListResponse<Objects.Account>> AccountsAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<ListResponse<Objects.Account>>(MethodType.Get, "notifications/{group_key}/accounts", "group_key", Utils.ExpressionToDictionary(parameters), apiVersion: "v2");
        }

        /// <inheritdoc cref="AccountsAsync(Expression{Func{string, object}}[])"/>
        public Task<ListResponse<Objects.Account>> AccountsAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<ListResponse<Objects.Account>>(MethodType.Get, "notifications/{group_key}/accounts", "group_key", parameters, apiVersion: "v2");
        }

        /// <summary>
        /// <para>Get the number of unread notifications.</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>int</c> limit (optional)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> types (optional)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> exclude_types (optional)</para>
        /// <para>- <c>long</c> account_id (optional)</para>
        /// <para>- <c>IEnumerable&lt;string&gt;</c> grouped_types (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the dict string,integer object.</para>
        /// </returns>
        public Task<DictResponse<string, int>> UnreadCountAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessApiAsync<DictResponse<string, int>>(MethodType.Get, "notifications/unread_count", Utils.ExpressionToDictionary(parameters), apiVersion: "v2");
        }

        /// <inheritdoc cref="UnreadCountAsync(Expression{Func{string, object}}[])"/>
        public Task<DictResponse<string, int>> UnreadCountAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessApiAsync<DictResponse<string, int>>(MethodType.Get, "notifications/unread_count", parameters, apiVersion: "v2");
        }
    }
}
