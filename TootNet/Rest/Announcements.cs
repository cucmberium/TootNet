// Generated by TootNet.Generator.  DO NOT EDIT!

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using TootNet.Internal;
using TootNet.Objects;

namespace TootNet.Rest
{
    public class Announcements : ApiBase
    {
        internal Announcements(Tokens e) : base(e) { }

        /// <summary>
        /// <para>View all announcements</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>bool</c> with_dismissed (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the list of announcement object.</para>
        /// </returns>
        public Task<IEnumerable<Objects.Announcement>> GetAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessApiAsync<IEnumerable<Objects.Announcement>>(MethodType.Get, "announcements", Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="GetAsync(Expression{Func{string, object}}[])"/>
        public Task<IEnumerable<Objects.Announcement>> GetAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessApiAsync<IEnumerable<Objects.Announcement>>(MethodType.Get, "announcements", parameters);
        }

        /// <summary>
        /// <para>Dismiss an announcement</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the empty object.</para>
        /// </returns>
        public Task DismissAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Post, "announcements/{id}/dismiss", "id", Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="DismissAsync(Expression{Func{string, object}}[])"/>
        public Task DismissAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Post, "announcements/{id}/dismiss", "id", parameters);
        }

        /// <summary>
        /// <para>Add a reaction to an announcement</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>string</c> name (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the empty object.</para>
        /// </returns>
        public Task PutReactionAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Put, "announcements/{id}/reactions/{name}", new []{"id", "name"}, Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="PutReactionAsync(Expression{Func{string, object}}[])"/>
        public Task PutReactionAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Put, "announcements/{id}/reactions/{name}", new []{"id", "name"}, parameters);
        }

        /// <summary>
        /// <para>Remove a reaction from an announcement</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>string</c> name (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the empty object.</para>
        /// </returns>
        public Task DeleteReactionAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Delete, "announcements/{id}/reactions/{name}", new []{"id", "name"}, Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="DeleteReactionAsync(Expression{Func{string, object}}[])"/>
        public Task DeleteReactionAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Delete, "announcements/{id}/reactions/{name}", new []{"id", "name"}, parameters);
        }
    }
}
