// Generated by TootNet.Generator.  DO NOT EDIT!

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using TootNet.Internal;
using TootNet.Objects;

namespace TootNet.Rest
{
    public class ScheduledStatuses : ApiBase
    {
        internal ScheduledStatuses(Tokens e) : base(e) { }

        /// <summary>
        /// <para>View scheduled statuses</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> max_id (optional)</para>
        /// <para>- <c>long</c> since_id (optional)</para>
        /// <para>- <c>long</c> min_id (optional)</para>
        /// <para>- <c>int</c> limit (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the list of scheduledstatus object.</para>
        /// </returns>
        public Task<Linked<Objects.ScheduledStatus>> GetAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessApiAsync<Linked<Objects.ScheduledStatus>>(MethodType.Get, "scheduled_statuses", Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="GetAsync(Expression{Func{string, object}}[])"/>
        public Task<Linked<Objects.ScheduledStatus>> GetAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessApiAsync<Linked<Objects.ScheduledStatus>>(MethodType.Get, "scheduled_statuses", parameters);
        }

        /// <summary>
        /// <para>View a single scheduled status</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the scheduledstatus object.</para>
        /// </returns>
        public Task<Objects.ScheduledStatus> IdAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<Objects.ScheduledStatus>(MethodType.Get, "scheduled_statuses/{id}", "id", Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="IdAsync(Expression{Func{string, object}}[])"/>
        public Task<Objects.ScheduledStatus> IdAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<Objects.ScheduledStatus>(MethodType.Get, "scheduled_statuses/{id}", "id", parameters);
        }

        /// <summary>
        /// <para>Update a scheduled status's publishing date</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// <para>- <c>string</c> scheduled_at (format: "2019-01-01 12:00:00") (optional)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the scheduledstatus object.</para>
        /// </returns>
        public Task<Objects.ScheduledStatus> PutAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<Objects.ScheduledStatus>(MethodType.Put, "scheduled_statuses/{id}", "id", Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="PutAsync(Expression{Func{string, object}}[])"/>
        public Task<Objects.ScheduledStatus> PutAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync<Objects.ScheduledStatus>(MethodType.Put, "scheduled_statuses/{id}", "id", parameters);
        }

        /// <summary>
        /// <para>Cancel a scheduled status</para>
        /// <para>Available parameters:</para>
        /// <para>- <c>long</c> id (required)</para>
        /// </summary>
        /// <param name="parameters">The parameters.</param>
        /// <returns>
        /// <para>The task object representing the asynchronous operation.</para>
        /// <para>The Result property on the task object returns the empty object.</para>
        /// </returns>
        public Task DeleteAsync(params Expression<Func<string, object>>[] parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Delete, "scheduled_statuses/{id}", "id", Utils.ExpressionToDictionary(parameters));
        }

        /// <inheritdoc cref="DeleteAsync(Expression{Func{string, object}}[])"/>
        public Task DeleteAsync(IDictionary<string, object> parameters)
        {
            return Tokens.AccessParameterReservedApiAsync(MethodType.Delete, "scheduled_statuses/{id}", "id", parameters);
        }
    }
}
